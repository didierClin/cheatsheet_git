<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Cheat sheet GIT / GITHUB</title>
    <script type="text/javascript" src="js/app.js"></script>
    <link href="web/css/apps.css" rel="stylesheet" type="text/css"  />
  </head>
  <body>
	<div id="header">
		<h1>Cheat sheet GIT / GITHUB</h1>
	</div>
	<div class="entete">


		===========================<br/><br/><br/>
                    configurer  GIT <br/>
		===========================<br/>
git config  --global user.name "nom"
git config --global user.email "adresse@email"
git config --global color.ui auto

git config --list        
	</div>
	<div class="entete">

		===========================<br/>
                    Utiliser GIT en local<br/>
		===========================<br/>
mkdir cheatsheet_git; cd cheatsheet_git
git init pour initialiser un projet,
git status donne l'état actuel,
git add mon_site.html   ajoute le fichier mon_site.html
git commit -m "commentaire sur l'objet du commit"

git commit -a -m "comm"     add et commit 

git log  donne les détails des différents points de commit 
git log -n 2
git log --oneline

git diff  liste les différences entre les versions des fichiers du projet

	</div>
	<div class="entete">

===========================<br/>
                    Naviguer dans GIT<br/>
===========================<br/>
git log [ --online ]  chercher le commit number 
git checkout numlogARestaurer  permet de retrouver le code à un moment donné
        Seuleument en consultation - pas de commit possible sur un projet
 git checkout numlogARest index.html   restaure le fichier index.html à l'instant du commit
        possible de commiter le fichier
        
  git revert
  git reset
	</div>
	<div class="entete">

===========================<br/>
             git en mode remote<br/>
=========================== <br/>
sur gitHub on crée un repository cheatsheet_git
synchroniser le repertoire git local avec le repository gitHub:
git remote add origin git@github.com:didierClin/cheatSheet_git.git
pousser les fichiers locaux vers le serveur:
git push -u origin master

git pull origin master   recuperer un projet ou une branche git

git remote -v    verifie que le repository existe sur github
	</div>
	<div>

	<div class="entete">
===========================<br/>
             git : branches<br/>
=========================== <br/>
	</div>
	<p>
une branche = une fonctionnalité
git branch new_feature

git branch liste les différentes branches existantes

git checkout new_feature  positionne l'environnement git sur la branche 'new_feature'

git diff master..new_feature liste les différences entre les deux branches

git merge new_feature  merge les changements entre les deux branches et réalise le commit
                                    on doit etre dans la branche receptrice du merge
git branch -d new_feature   delete la branche new_feature (clean-up)
git branch -D new_feature   force le delete lorsque la branche n'est pas commitée avant le delete (pending change)
	</p>
	</div>
	<div>
	       <p	class="entete">

		===========================<br/>
            		 git : Partager<br/>
		===========================<br/>
		</p>
		<p>
git fetch

git clone 

héberger: 
git branch gh-pages      crée une branche (gh-pages : gitHub pages)
git checkout gh-pages
git push origin gh-pages  dans settings on obtient une url externe  (voir jekill)

	</div>
  </body>
</html>
